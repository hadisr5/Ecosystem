@*
@using hc = Seventy.Web.Areas.Edu.ExamCorrection.ExamCorrectionController;
@{
    Layout = "~/Areas/Edu/Shared/_Layout.cshtml";
}
@section Styles{
    <link rel="stylesheet" type="text/css" href="/app-assets/vendors/css/tables/datatable/datatables.min.css">

    <link rel="stylesheet" type="text/css" href="/app-assets/css-rtl/plugins/pickers/persianDatepicker-master/css/persianDatepicker-default.css" />
    <link rel="stylesheet" type="text/css" href="/app-assets/css-rtl/plugins/forms/wizard.min.css">
}
<section id="configuration">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">لیست امتحان های منتظر تصحیح</h4>
                    <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                            <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                            <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                            <li><a data-action="close"><i class="ft-x"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-content collapse show">
                    <div class="card-body card-dashboard">
                        <p class="card-text">شما میتوانید از جدول زیر اقدام به تصحیح امتحان کنید</p>
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered zero-configuration">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CourseID)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].AchievementsState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CateringPackID)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CertificateType)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].Description)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].DocumentsState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].HozoriState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].LikeRank)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].Progress)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].ResidState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].TermID)</th>
                                        <th class="CustomOperate">عملیات</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in await hc.getNeedReviewExams())
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <td>@item.ExamTitle</td>
                                            <td>@item.</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>#</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CourseID)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].AchievementsState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CateringPackID)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].CertificateType)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].Description)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].DocumentsState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].HozoriState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].LikeRank)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].Progress)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].ResidState)</th>
                                        <th>@Html.DisplayNameFor(q => q[0].TermID)</th>
                                        <th class="CustomOperate">عملیات</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <nav class="mb-3" aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="PrevPage()" aria-label="Previous">
                                        <span aria-hidden="true">« قبلی</span>
                                        <span class="sr-only">قبلی</span>
                                    </a>
                                </li>
                                <div id="pages" class="d-flex">
                                    <li class="page-item">
                                        <a class="page-link" href="javascript:void(0)" onclick="LoadPage(1)">1<span class="spinner-border spinner-border-sm hidden position-absolute"  style="left:5px" role="status" aria-hidden="true" id="PageBtn_1"></span></a>
                                    </li>
                                </div>
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="NextPage()" aria-label="Next">
                                        <span aria-hidden="true">بعدی »</span>
                                        <span class="sr-only">بعدی</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    @*DataTbl*@
@*
    <script src="/app-assets/vendors/js/tables/datatable/datatables.min.js" type="text/javascript"></script>

    <script>
        /* Pageination */
        var tbl;
        var currentPage = 1;
        var total = 1;
        function LoadPage(id) {
            currentPage = id;
            getPageItems();
        }
        function NextPage() {
            if (currentPage < total) {
                currentPage += 1;
                getPageItems();
            }
        }
        function PrevPage() {
            if (currentPage > 1) {
                currentPage -= 1;
                getPageItems();
            }
        }

        function getPageItems() {
            var p = $("#PageBtn_" + currentPage);
            p.removeClass("hidden");
            tbl.clear().draw();
            $.ajax({
                type: "POST",
                url: "/Edu/getNeedReviewExams",
                data: {
                    PageNo: currentPage,
                },
                success: function (data) {
                    if (data.includes("_|_")) {
                        var spl = data.split("_%_");
                        var totalPage = spl[0];
                        total = parseInt(totalPage);
                        $("#pages").html(LoadPageNumbers(totalPage));
                        var spl = spl[1].split("_$_");
                        jQuery.each(spl, function (i, val) {
                            var sub = val.split('_|_');
                            if (sub[0] != '') {
                                var row = tbl.row.add([
                                    sub[0],
                                    sub[1],
                                    sub[2],
                                    sub[3],
                                    sub[4],
                                    sub[5],
                                    sub[6],
                                    sub[7],
                                    sub[8],
                                    sub[9],
                                    sub[10],
                                    sub[11],
                                    '<button type="button" class="btn-sm btn-warning" onclick="Edit(' + sub[0] + ')"><i class="ficon ft-edit"></i></button>&nbsp' +
                                    '<button type="button" class="btn-sm btn-danger" onclick="Delete(' + sub[0] + ')"><i class="ficon ft-trash-2"></i></button>'
                                ]);
                                row.node().id = 'Row_' + sub[0];

                                tbl.draw(true);
                            }
                        });
                        p.addClass("hidden");
                    }
                    else {
                        p.addClass("hidden");
                    }
                }, error: function (data) {
                    swal("خطا", data.statusText, "error");
                    p.addClass("hidden");
                }
            });
        }
        function LoadPageNumbers(totalPage) {
            var res = "";
            var added = 0;
            var cur = currentPage - 2;
            for (var i = cur; i <= totalPage; i++) {
                if (i >= 1) {
                    res += '<li class="page-item"><a class="page-link" href="javascript:void(0)" onclick="LoadPage(' + i + ')">' + i + '<span class="spinner-border spinner-border-sm hidden position-absolute"  style="left:5px" role="status" aria-hidden="true" id="PageBtn_' + i + '"></span></a></li>';
                    added += 1;
                }
                if (added >= 7) {
                    break;
                }
            }
            return res;
        }
        $(document).ready(function () {
            tbl = $('.zero-configuration').DataTable({
                "paging": false,
                "processing": true,
            });
            getPageItems();
        });


        function Edit(id) {
            swal({
                title: 'جهت ویرایش این اطلاعات مطمئن هستید؟',
                text: 'شما نمی توانید این را برگردانید!',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'بله ، آن را ویرایش میکنم!',
                cancelButtonText: 'منصرف شدم',
            }).then((result) => {
                if (result.value) {
                    doEdit(id);
                }
            });
        }
        function doEdit(id) {
            document.location.href = "/Edu/ExamQuestion?id=" + id;
        }
        function Delete(id) {
            swal({
                title: 'جهت حذف این اطلاعات مطمئن هستید؟',
                text: 'شما نمی توانید این را برگردانید!',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'بله ، آن را حذف میکنم!',
                cancelButtonText: 'منصرف شدم',
            }).then((result) => {
                if (result.value) {
                    doDelete(id);
                }
            });
        }
        function doDelete(id) {
            $.ajax({
                type: "POST",
                url: "/Edu/RemoveExam",
                data: {
                    EntityID: id,
                },
                success: function (data) {
                    if (data == "done") {
                        $("#Row_" + id).remove();
                        swal("انجام شد", data.statusText, "success");
                    }
                    else {
                        swal("خطا", data.statusText, "error");
                    }
                }, error: function (data) {
                    swal("خطا", data.statusText, "error");
                }
            });
        }
        function getAllQuestionsByCourceID(id) {
            TempTbl.clear().draw();
            $.ajax({
                type: "POST",
                url: "/Edu/getAllQuestionsByCourceID",
                data: {
                    EntityID: id,
                    added: SelectedQuestion,
                },
                success: function (data) {
                    if (data.includes("|") == true) {
                        var allEnt = data.split('_$_');
                        jQuery.each(allEnt, function (i, val) {
                            var sub = val.split('|');
                            TempTbl.row.add([
                                sub[0],
                                sub[1],
                                sub[2],
                                sub[3],
                                sub[4],
                                '<input type="number" id="Barom_' + sub[0] + '" placeholder="بارم" />',
                                '<button type="button" class="btn-sm btn-success" onclick="AddToList(' + sub[0] + ')">افزودن سوال</button>'
                            ]).node().id = 'tempRow_' + sub[0];
                            TempTbl.draw(true);
                        });
                    }
                }, error: function (data) {
                    swal("خطا", data.statusText, "error");
                }
            });
        }
        var SelectedQuestion = [];
        var QuestionWithBarom = [];
        function LoadItemsFromList() {
            FinalTbl.clear().draw();
            $.ajax({
                type: "POST",
                url: "/Edu/getQuestionsByID",
                data: {
                    EntityIDs: SelectedQuestion,
                },
                success: function (data) {
                    if (data.includes("|") == true) {
                        var allEnt = data.split('_$_');
                        jQuery.each(allEnt, function (i, val) {
                            var sub = val.split('|');

                            var barom = search(parseInt(sub[0]), QuestionWithBarom);
                            FinalTbl.row.add([
                                sub[0],
                                sub[1],
                                sub[2],
                                sub[3],
                                sub[4],
                                barom,
                                '<button type="button" class="btn-sm btn-warning" onclick="RemoveFromList(' + sub[0] + ')">حذف سوال</button>'
                            ]).node().id = 'FinalRow_' + sub[0];
                            FinalTbl.draw(true);
                        });
                    }
                }, error: function (data) {
                    swal("خطا", data.statusText, "error");
                }
            });
        }
        function AddToList(id) {
            if ($("#Barom_" + id).val() == "") {
                swal("اخطار", "لطفا بارم این سوال را وارد کنید", "error");
                return;
            }
            if (SelectedQuestion.indexOf(id) != -1)
                return;
            QuestionWithBarom.push({ "key": id, "value": $("#Barom_" + id).val() });
            SelectedQuestion.push(id);
            $("#tempRow_" + id).hide();

            CalsQuestionCountAndBarom();
            LoadItemsFromList();
        }
        function CalsQuestionCountAndBarom() {
            $("#QuestionCount").val(SelectedQuestion.length);

            var barom = 0;
            for (var i = 0; i < QuestionWithBarom.length; i++) {
                barom += parseInt(QuestionWithBarom[i].value)
            }
            $("#Barom").val(barom);

        }
        function RemoveFromList(id) {
            if (SelectedQuestion.indexOf(id) == -1)
                return;

            delete SelectedQuestion[SelectedQuestion.indexOf(id)];
            removeItem(QuestionWithBarom, "key", id);

            $("#FinalRow_" + id).hide();
            CalsQuestionCountAndBarom();
        }

        var removeItem = function (object, key, value) {
            if (value == undefined)
                return;

            for (var i in object) {
                if (object[i][key] == value) {
                    object.splice(i, 1);
                }
            }
        };
        function search(key, myArray) {
            for (var i = 0; i < myArray.length; i++) {
                if (myArray[i].key == key) {
                    return myArray[i].value;
                }
            }
        }
    </script>
}*@