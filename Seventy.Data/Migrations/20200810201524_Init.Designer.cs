// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seventy.Data;

namespace Seventy.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200810201524_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Seventy.DomainClass.Accounting.Deductions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Deductions","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.FinancialTransactions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("FinancialTransactions","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.GoroohAccount", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("GoroohAccount","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.KolAccount", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoroohID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("GoroohID");

                    b.HasIndex("RegUserID");

                    b.ToTable("KolAccount","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.MoeinAccount", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("KolID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("KolID");

                    b.HasIndex("RegUserID");

                    b.ToTable("MoeinAccount","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.SettlementRequest", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TafsiliID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TafsiliID");

                    b.HasIndex("UserID");

                    b.ToTable("SettlementRequest","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.TafsiliAccount", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MoeinID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("MoeinID");

                    b.HasIndex("RegUserID");

                    b.ToTable("TafsiliAccount","Accounting");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Access", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessControl")
                        .HasColumnType("int");

                    b.Property<int>("AccessType")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Access","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.AccessPermissionGroup", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionGroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserPermissionGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccessID");

                    b.HasIndex("PermissionGroupID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserPermissionGroupID");

                    b.ToTable("AccessPermissionGroup","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.DefaultRoleAccess", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccessID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("RoleID");

                    b.ToTable("DefaultRoleAccess","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.DocumentType", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UK_DocumentType");

                    b.ToTable("DocumentType","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Documents", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocFormat")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Documents","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Files", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("Files","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMExperience", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("KmExperience","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMNeeds", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("KmNeeds","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMcategory", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("KMcategory","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Logs", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnName("IP")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("MAC")
                        .HasColumnName("MAC")
                        .HasColumnType("varchar(17)")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Logs","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Messages", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MsgTitle")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("MsgType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("MsgViewed")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverUserID")
                        .HasColumnName("ReceiverUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverUserID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("SenderUserID");

                    b.ToTable("Messages","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.PermissionGroup", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("AccessGroup","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Permissions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entitle")
                        .IsRequired()
                        .HasColumnName("ENTitle")
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Permissions","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.PlaceLayers", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("PlaceLayers","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Places", b =>
                {
                    b.Property<int?>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12, 9)");

                    b.Property<int?>("LayerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12, 9)");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LayerID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Places","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.RolePermissions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("RoleID", "PermissionID")
                        .IsUnique()
                        .HasName("UK_RolePermissions");

                    b.ToTable("RolePermissions","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Roles", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Roles","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Tags", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("TagContainer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Tags","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Tickets", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("ResponderUserID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Tickets","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserAccess", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccessID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAccess","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserDocuments", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("FileID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDocuments","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserGroupMembers", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserGroupID");

                    b.HasIndex("UserID", "UserGroupID")
                        .IsUnique()
                        .HasName("UK_UserGroupMembers");

                    b.ToTable("UserGroupMembers","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserGroups", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("UserGroups","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserPermissionGroup", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionGroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PermissionGroupID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPermissionGroup","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserProfiles", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cell")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("CodeMelli")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Daneshgah")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Madrak")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Ostan")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("OstanSokoonat")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("PhotoFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Reshte")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Shahr")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ShahrSokoonat")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Tavalod")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PhotoFileId");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("UserProfiles","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserRole", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Users", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(124)")
                        .HasMaxLength(124)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users","Core");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.CateringPackage", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("CateringPackage","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Certificate", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditorOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("SampleFileID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("SampleFileID");

                    b.ToTable("Certificate","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.CertificateUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateID")
                        .HasColumnType("int");

                    b.Property<int>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CertificateID");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("CertificateUser","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.Course", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("HozoriType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoFileID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PublishState")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("RequiredDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PhotoFileID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Course","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseCategory", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryCat")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryCat")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("CourseCategory","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseGroups", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseGroups","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseObservation", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseObservation","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseRegistration", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AchievementsState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CateringPackId")
                        .HasColumnType("int");

                    b.Property<string>("CertificateType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentsState")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HozoriState")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("ResidState")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CateringPackId");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TermID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseRegistration","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.FavoriteCourses", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LikeRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteCourses","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.RelatedCourses", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstCourseID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("SecondCourseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("SecondCourseID");

                    b.HasIndex("FirstCourseID", "SecondCourseID")
                        .IsUnique()
                        .HasName("UK_RelatedCourses");

                    b.ToTable("RelatedCourses","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.RequestedCourses", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("RequestedCourses","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.Exam", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<int>("PassingGrade")
                        .HasColumnType("int");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<bool>("RandomQuestionOptionsOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("RandomQuestionsOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Exam","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.ExamAnswerSheet", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AchievedBarom")
                        .HasColumnType("float");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnswerOption")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ExamAnswerSheet","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.ExamQuestions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Barom")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("RegUserID");

                    b.ToTable("ExamQuestions","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.ExamUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<double?>("Result")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("ExamUser","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.QuestionOptions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasIndex("FileID");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RegUserID");

                    b.ToTable("QuestionOptions","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.Questions", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<bool>("MultiOption")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FileID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Questions","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exercise.Exercise", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Barom")
                        .HasColumnType("int");

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.ToTable("Exercise","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exercise.ExerciseUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("FileID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("ExerciseUser","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Forum", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Forum","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.LMS", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("LMS","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Lesson.Lesson", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PicFileID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PicFileID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Lesson","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Lesson.LessonObservation", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("LessonObservation","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Lesson.UserLesson", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("UserLesson","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Poll.Poll", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Barom")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TrainingWeekID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TrainingWeekID");

                    b.ToTable("Poll","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Poll.PollUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LikeRank")
                        .HasColumnType("int");

                    b.Property<int>("PollID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PollID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("PollUser","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherEvalIndex", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TeacherEvalIndex","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherEvalResult", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherEvalIndexID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TeacherEvalResult","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherLesson", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID")
                        .IsUnique()
                        .HasName("UK_TeacherLesson");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherLesson","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherLike", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<int>("LikeRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TeacherID");

                    b.HasIndex("UserID");

                    b.ToTable("TeacherLike","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Term.Term", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RegUserID");

                    b.ToTable("Term","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Term.TermLesson", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("CourseID");

                    b.HasIndex("LessonID");

                    b.HasIndex("TeacherID");

                    b.HasIndex("TermID");

                    b.ToTable("TermLesson","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingCenter", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PlaceID");

                    b.HasIndex("RegUserID");

                    b.ToTable("TrainingCenter","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.ContentObservation", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContentID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("ContentObservation","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.RequestForContent", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("UserID");

                    b.ToTable("RequestForContent","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DemoState")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExternalContentID")
                        .HasColumnType("int");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("FileID");

                    b.HasIndex("RegUserID");

                    b.ToTable("TrainingContent","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.UserContent", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TrainingContentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TrainingContentID");

                    b.HasIndex("UserID");

                    b.ToTable("UserContent","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingEval.TrainingEvalIndex", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TargetID")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.ToTable("TrainingEvalIndex","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingEval.TrainingEvalResult", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("TrainingEvalIndexID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TrainingEvalIndexID");

                    b.HasIndex("UserID");

                    b.ToTable("TrainingEvalResult","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeek", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("TermID");

                    b.ToTable("TrainingWeek","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeekContent", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<int>("TrainingWeekID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContentID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TrainingWeekID");

                    b.ToTable("TrainingWeekContent","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.UserTrainingWeekContent", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<int?>("LikeRank")
                        .HasColumnType("int");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RegUserID")
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<int>("TrainingWeekID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContentID");

                    b.HasIndex("CourseGroupID");

                    b.HasIndex("CourseID");

                    b.HasIndex("LessonID");

                    b.HasIndex("RegUserID");

                    b.HasIndex("TermID");

                    b.HasIndex("TrainingWeekID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTrainingWeekContent","EDU");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.Deductions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Deductions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Deductions_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.FinancialTransactions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("FinancialTransactionsRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_FinancialTransactions_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("FinancialTransactionsUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_FinancialTransactions_UserID_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.GoroohAccount", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("GoroohAccount")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_GoroohAccount_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.KolAccount", b =>
                {
                    b.HasOne("Seventy.DomainClass.Accounting.GoroohAccount", "Gorooh")
                        .WithMany("KolAccount")
                        .HasForeignKey("GoroohID")
                        .HasConstraintName("FK_KolAccount_GoroohAccount")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("KolAccount")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_KolAccount_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.MoeinAccount", b =>
                {
                    b.HasOne("Seventy.DomainClass.Accounting.KolAccount", "Kol")
                        .WithMany("MoeinAccount")
                        .HasForeignKey("KolID")
                        .HasConstraintName("FK_MoeinAccount_KolAccount")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("MoeinAccount")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_MoeinAccount_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.SettlementRequest", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("SettlementRequestRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_SettlementRequest_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Accounting.TafsiliAccount", "Tafsili")
                        .WithMany("SettlementRequest")
                        .HasForeignKey("TafsiliID")
                        .HasConstraintName("FK_SettlementRequest_TafsiliAccount")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("SettlementRequestUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_SettlementRequest_UserID_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Accounting.TafsiliAccount", b =>
                {
                    b.HasOne("Seventy.DomainClass.Accounting.MoeinAccount", "Moein")
                        .WithMany("TafsiliAccount")
                        .HasForeignKey("MoeinID")
                        .HasConstraintName("FK_TafsiliAccount_MoeinAccount")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TafsiliAccount")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TafsiliAccount_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Access", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Accesses")
                        .HasForeignKey("RegUserID");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.AccessPermissionGroup", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Access", "Access")
                        .WithMany("AccessPermissionGroups")
                        .HasForeignKey("AccessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.PermissionGroup", "PermissionGroup")
                        .WithMany("AccessPermissionGroups")
                        .HasForeignKey("PermissionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("AccessPermissionGroupReg")
                        .HasForeignKey("RegUserID");

                    b.HasOne("Seventy.DomainClass.Core.UserPermissionGroup", null)
                        .WithMany("AccessPermissionGroups")
                        .HasForeignKey("UserPermissionGroupID");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.DefaultRoleAccess", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Access", "Access")
                        .WithMany("DefaultRoleAccesses")
                        .HasForeignKey("AccessID")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("DefaultRoleAccessesReg")
                        .HasForeignKey("RegUserID");

                    b.HasOne("Seventy.DomainClass.Core.Roles", "Role")
                        .WithMany("DefaultRoleAccesses")
                        .HasForeignKey("RoleID")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.DocumentType", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("DocumentType")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_DocumentType_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Documents", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Documents")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Documents_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Files", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("FilesRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Files_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("FilesUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_Files_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMExperience", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("KmExperience")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_KmExperience_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMNeeds", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("KmNeeds")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_KmNeeds_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.KMcategory", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Kmcategory")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_KMcategory_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Logs", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Logs")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Logs_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Messages", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "ReceiverUser")
                        .WithMany("MessagesReceiverUser")
                        .HasForeignKey("ReceiverUserID")
                        .HasConstraintName("FK_Messages_ReceiverUserID_Users")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("MessagesRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Messages_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "SenderUser")
                        .WithMany("MessagesSenderUser")
                        .HasForeignKey("SenderUserID")
                        .HasConstraintName("FK_Messages_SenderUserID_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.PermissionGroup", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("AccessGroupReg")
                        .HasForeignKey("RegUserID");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Permissions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Permissions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Permissions_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.PlaceLayers", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("PlaceLayers")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_PlaceLayers_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Places", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.PlaceLayers", "Layer")
                        .WithMany("Places")
                        .HasForeignKey("LayerID")
                        .HasConstraintName("FK_Places_LocationLayers");

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Places")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Places_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.RolePermissions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_RolePermissions_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Roles", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Roles")
                        .HasForeignKey("RegUserID");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Tags", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Tags")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Tags_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.Tickets", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Tickets")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Tickets_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserAccess", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Access", "Access")
                        .WithMany("UserAccesses")
                        .HasForeignKey("AccessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserAccess")
                        .HasForeignKey("RegUserID");

                    b.HasOne("Seventy.DomainClass.Core.Users", "Users")
                        .WithMany("UserAccessPermision")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserDocuments", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.DocumentType", "DocumentType")
                        .WithMany("UserDocuments")
                        .HasForeignKey("DocumentTypeID")
                        .HasConstraintName("FK_UserDocuments_DocumentType")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Files", "File")
                        .WithMany("UserDocuments")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_UserDocuments_Files")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserDocumentsRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserDocuments_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserDocumentsUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserDocuments_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserGroupMembers", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserGroupMembersRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserGroupMembers_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.UserGroups", "UserGroup")
                        .WithMany("UserGroupMembers")
                        .HasForeignKey("UserGroupID")
                        .HasConstraintName("FK_UserGroupMembers_UserGroups")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserGroupMembersUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserGroupMembers_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserGroups", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserGroups_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserPermissionGroup", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.PermissionGroup", "PermissionGroup")
                        .WithMany("UserPermissionGroups")
                        .HasForeignKey("PermissionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserPermissionGroupReg")
                        .HasForeignKey("RegUserID");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserPermissionGroup")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserProfiles", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Files", "PhotoFile")
                        .WithMany("UserProfiles")
                        .HasForeignKey("PhotoFileId")
                        .HasConstraintName("FK_UserProfiles_Files");

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserProfilesRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserProfiles_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Seventy.DomainClass.Core.UserProfiles", "UserID")
                        .HasConstraintName("FK_UserProfiles_Users")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seventy.DomainClass.Core.UserRole", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserRolesReg")
                        .HasForeignKey("RegUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seventy.DomainClass.Core.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.CateringPackage", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("CateringPackage")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_CateringPackage_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Certificate", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Certificate")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Certificate_Users");

                    b.HasOne("Seventy.DomainClass.Core.Files", "SampleFile")
                        .WithMany("Certificate")
                        .HasForeignKey("SampleFileID")
                        .HasConstraintName("FK_Certificate_Files")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.CertificateUser", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Certificate", "Certificate")
                        .WithMany("CertificateUser")
                        .HasForeignKey("CertificateID")
                        .HasConstraintName("FK_CertificateUser_Certificate")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseGroups", "CourseGroups")
                        .WithMany("CertificateUsers")
                        .HasForeignKey("CourseGroupID")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("CertificateUsers")
                        .HasForeignKey("CourseID")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("CertificateUserRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_CertificateUser_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("CertificateUserUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_CertificateUser_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.Course", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseCategory", "Category")
                        .WithMany("Course")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Course_CourseCategory")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Files", "PhotoFile")
                        .WithMany("Course")
                        .HasForeignKey("PhotoFileID")
                        .HasConstraintName("FK_Course_PhotoFileID_Files");

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Course")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Course_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseCategory", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("CourseCategory")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_CourseCategory_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseGroups", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_CourseGroups_Course")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseObservation", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("CourseObservation")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_CourseObservation_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("CourseObservationRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_CourseObservation_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("CourseObservationUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_CourseObservation_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.CourseRegistration", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.CateringPackage", "CateringPack")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("CateringPackId")
                        .HasConstraintName("FK_CourseRegistration_CateringPackage");

                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseGroups", "CourseGroup")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("CourseGroupID")
                        .HasConstraintName("FK_CourseGroup_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_Course_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("CourseRegistrationRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_CourseRegistration_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.EDU.Term.Term", "Term")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("TermID")
                        .HasConstraintName("FK_CourseRegistration_Term")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("CourseRegistrationUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_CourseRegistration_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.FavoriteCourses", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_FavoriteCourses_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("FavoriteCoursesRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_FavoriteCourses_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("FavoriteCoursesUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_FavoriteCourses_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.RelatedCourses", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "FirstCourse")
                        .WithMany("RelatedCoursesFirstCourse")
                        .HasForeignKey("FirstCourseID")
                        .HasConstraintName("FK_RelatedCourses_FirstCourseID_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("RelatedCourses")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_RelatedCourses_Users");

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "SecondCourse")
                        .WithMany("RelatedCoursesSecondCourse")
                        .HasForeignKey("SecondCourseID")
                        .HasConstraintName("FK_RelatedCourses_SecondCourseID_Course")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Course.RequestedCourses", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("RequestedCourses")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_RequestedCourses_RegUserID_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.Exam", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("Exam")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_Exam_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Exam")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Exam_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.ExamQuestions", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Exam.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamID")
                        .HasConstraintName("FK_ExamQuestions_Exam")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Exam.Questions", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionID")
                        .HasConstraintName("FK_ExamQuestions_Questions")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_ExamQuestions_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.ExamUser", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Exam.Exam", "Exam")
                        .WithMany("ExamUser")
                        .HasForeignKey("ExamID")
                        .HasConstraintName("FK_ExamUser_Exam")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("ExamUserRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_ExamUser_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("ExamUserUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_ExamUser_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.QuestionOptions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Files", "File")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_QuestionOptions_Files");

                    b.HasOne("Seventy.DomainClass.EDU.Exam.Questions", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionOptions_Questions")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_QuestionOptions_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exam.Questions", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Files", "File")
                        .WithMany("Questions")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_Questions_Files");

                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_Questions_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Questions")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Questions_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exercise.Exercise", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("Exercise")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_Exercise_Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Exercise.ExerciseUser", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Exercise.Exercise", "Exercise")
                        .WithMany("ExerciseUser")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK_ExerciseUser_Exercise")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Files", "File")
                        .WithMany("ExerciseUser")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_ExerciseUser_Files")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("ExerciseUserRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_ExerciseUser_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("ExerciseUserUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_ExerciseUser_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Forum", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("Forum")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_Forum_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Forum")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Forum_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.LMS", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Lms")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_LMS_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Lesson.Lesson", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Files", "PicFile")
                        .WithMany("Lesson")
                        .HasForeignKey("PicFileID")
                        .HasConstraintName("FK_Lesson_Files");

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Lesson")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Lesson_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Lesson.LessonObservation", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("LessonObservation")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_LessonObservation_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("LessonObservationRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_LessonObservation_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("LessonObservationUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_LessonObservation_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Poll.Poll", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Poll")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Poll_Users");

                    b.HasOne("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeek", "TrainingWeek")
                        .WithMany("Poll")
                        .HasForeignKey("TrainingWeekID")
                        .HasConstraintName("FK_Poll_TrainingWeek")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Poll.PollUser", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Poll.Poll", "Poll")
                        .WithMany("PollUser")
                        .HasForeignKey("PollID")
                        .HasConstraintName("FK_PollUser_Poll")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("PollUserRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_PollUser_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("PollUserUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_PollUser_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherLesson", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TeacherLessonRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TeacherLesson_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "Teacher")
                        .WithMany("TeacherLessonTeacher")
                        .HasForeignKey("TeacherID")
                        .HasConstraintName("FK_TeacherLesson_TeacherID_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Teacher.TeacherLike", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("TeacherLike")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_TeacherLike_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TeacherLikeRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TeacherLike_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "Teacher")
                        .WithMany("TeacherLikeTeacher")
                        .HasForeignKey("TeacherID")
                        .HasConstraintName("FK_TeacherLike_TeacherID_Users")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("TeacherLikeUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_TeacherLike_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Term.Term", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseGroups", "CourseGroup")
                        .WithMany("Term")
                        .HasForeignKey("CourseGroupID")
                        .HasConstraintName("FK_Term_CourseGroups")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("Terms")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_Term_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("Term")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_Term_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.Term.TermLesson", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseGroups", "CourseGroup")
                        .WithMany("TermLessons")
                        .HasForeignKey("CourseGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("TermLessons")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("TermLessons")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "Teacher")
                        .WithMany("TermLessons")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Term.Term", "Term")
                        .WithMany("TermLessons")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingCenter", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Places", "Place")
                        .WithMany("TrainingCenter")
                        .HasForeignKey("PlaceID")
                        .HasConstraintName("FK_TrainingCenter_Places")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TrainingCenter")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TrainingCenter_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.ContentObservation", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", "Content")
                        .WithMany("ContentObservation")
                        .HasForeignKey("ContentID")
                        .HasConstraintName("FK_ContentObservation_TrainingContent")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("ContentObservationRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_ContentObservation_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("ContentObservationUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_ContentObservation_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.RequestForContent", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("RequestForContent")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_RequestForContent_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("RequestForContentRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_RequestForContent_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("RequestForContentUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_RequestForContent_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Files", "File")
                        .WithMany("TrainingContent")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_TrainingContent_Files");

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TrainingContent")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TrainingContent_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingContent.UserContent", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserContentRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserContent_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", "TrainingContent")
                        .WithMany("UserContent")
                        .HasForeignKey("TrainingContentID")
                        .HasConstraintName("FK_UserContent_TrainingContent")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserContentUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserContent_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingEval.TrainingEvalIndex", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TrainingEvalIndex")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TrainingEvalIndex_Users");
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingEval.TrainingEvalResult", b =>
                {
                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TrainingEvalResultRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TrainingEvalResult_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.EDU.TrainingEval.TrainingEvalIndex", "TrainingEvalIndex")
                        .WithMany("TrainingEvalResult")
                        .HasForeignKey("TrainingEvalIndexID")
                        .HasConstraintName("FK_TrainingEvalResult_TrainingEvalIndex")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("TrainingEvalResultUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_TrainingEvalResult_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeek", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("TrainingWeek")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_TrainingWeek_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Term.Term", "Term")
                        .WithMany("TrainingWeeks")
                        .HasForeignKey("TermID")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeekContent", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", "Content")
                        .WithMany("TrainingWeekContent")
                        .HasForeignKey("ContentID")
                        .HasConstraintName("FK_TrainingWeekContent_TrainingContent")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("TrainingWeekContent")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_TrainingWeekContent_Users");

                    b.HasOne("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeek", "TrainingWeek")
                        .WithMany("TrainingWeekContent")
                        .HasForeignKey("TrainingWeekID")
                        .HasConstraintName("FK_TrainingWeekContent_TrainingWeek")
                        .IsRequired();
                });

            modelBuilder.Entity("Seventy.DomainClass.EDU.TrainingWeek.UserTrainingWeekContent", b =>
                {
                    b.HasOne("Seventy.DomainClass.EDU.TrainingContent.TrainingContent", "Content")
                        .WithMany("UserTrainingWeekContent")
                        .HasForeignKey("ContentID")
                        .HasConstraintName("FK_UserTrainingWeekContent_TrainingContent")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.CourseGroups", "CourseGroup")
                        .WithMany("UserTrainingWeekContent")
                        .HasForeignKey("CourseGroupID")
                        .HasConstraintName("FK_UserTrainingWeekContent_CourseGroups")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Course.Course", "Course")
                        .WithMany("UserTrainingWeekContent")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_UserTrainingWeekContent_Course")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.Lesson.Lesson", "Lesson")
                        .WithMany("UserTrainingWeekContent")
                        .HasForeignKey("LessonID")
                        .HasConstraintName("FK_UserTrainingWeekContent_Lesson")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "RegUser")
                        .WithMany("UserTrainingWeekContentRegUser")
                        .HasForeignKey("RegUserID")
                        .HasConstraintName("FK_UserTrainingWeekContent_RegUserID_Users");

                    b.HasOne("Seventy.DomainClass.EDU.Term.Term", "Term")
                        .WithMany("UserTrainingWeekContents")
                        .HasForeignKey("TermID")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.EDU.TrainingWeek.TrainingWeek", "TrainingWeek")
                        .WithMany("UserTrainingWeekContent")
                        .HasForeignKey("TrainingWeekID")
                        .HasConstraintName("FK_UserTrainingWeekContent_TrainingWeek")
                        .IsRequired();

                    b.HasOne("Seventy.DomainClass.Core.Users", "User")
                        .WithMany("UserTrainingWeekContentUser")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserTrainingWeekContent_Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
